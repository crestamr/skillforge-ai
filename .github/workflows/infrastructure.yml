name: Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'

env:
  TERRAFORM_VERSION: '1.6.0'
  AWS_REGION: 'us-west-2'

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Format Check
      working-directory: infrastructure
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      working-directory: infrastructure
      run: terraform init -backend=false
      
    - name: Terraform Validate
      working-directory: infrastructure
      run: terraform validate
      
    - name: Run tflint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest
        
    - name: TFLint
      working-directory: infrastructure
      run: |
        tflint --init
        tflint --recursive

  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif
        
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: infrastructure
        format: sarif
        
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec.sarif

  terraform-plan-staging:
    name: Terraform Plan (Staging)
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: infrastructure/environments/staging
      run: terraform init
      
    - name: Terraform Plan
      working-directory: infrastructure/environments/staging
      run: |
        terraform plan -out=tfplan -var-file=staging.tfvars
        terraform show -json tfplan > tfplan.json
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-staging
        path: |
          infrastructure/environments/staging/tfplan
          infrastructure/environments/staging/tfplan.json
          
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infrastructure/environments/staging/tfplan.json', 'utf8');
          const comment = `## Terraform Plan (Staging)
          
          \`\`\`json
          ${plan}
          \`\`\`
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  terraform-plan-production:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: infrastructure/environments/production
      run: terraform init
      
    - name: Terraform Plan
      working-directory: infrastructure/environments/production
      run: |
        terraform plan -out=tfplan -var-file=production.tfvars
        terraform show -json tfplan > tfplan.json
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-production
        path: |
          infrastructure/environments/production/tfplan
          infrastructure/environments/production/tfplan.json

  terraform-apply-staging:
    name: Terraform Apply (Staging)
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-staging
        path: infrastructure/environments/staging/
        
    - name: Terraform Init
      working-directory: infrastructure/environments/staging
      run: terraform init
      
    - name: Terraform Apply
      working-directory: infrastructure/environments/staging
      run: terraform apply -auto-approve tfplan
      
    - name: Output Infrastructure Info
      working-directory: infrastructure/environments/staging
      run: |
        terraform output -json > infrastructure-outputs.json
        
    - name: Upload Infrastructure Outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs-staging
        path: infrastructure/environments/staging/infrastructure-outputs.json
        
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#infrastructure'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  terraform-apply-production:
    name: Terraform Apply (Production)
    runs-on: ubuntu-latest
    needs: terraform-plan-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-production
        path: infrastructure/environments/production/
        
    - name: Terraform Init
      working-directory: infrastructure/environments/production
      run: terraform init
      
    - name: Terraform Apply
      working-directory: infrastructure/environments/production
      run: terraform apply -auto-approve tfplan
      
    - name: Output Infrastructure Info
      working-directory: infrastructure/environments/production
      run: |
        terraform output -json > infrastructure-outputs.json
        
    - name: Upload Infrastructure Outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs-production
        path: infrastructure/environments/production/infrastructure-outputs.json
        
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#infrastructure'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  kubernetes-deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [terraform-apply-staging, terraform-apply-production]
    if: always() && (needs.terraform-apply-staging.result == 'success' || needs.terraform-apply-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name skillforge-ai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        
    - name: Deploy applications
      working-directory: infrastructure/kubernetes
      run: |
        kubectl apply -f namespace.yaml
        kubectl apply -f configmaps/
        kubectl apply -f secrets/
        kubectl apply -f deployments/
        kubectl apply -f services/
        kubectl apply -f ingress/
        
    - name: Wait for deployments
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/frontend
        kubectl wait --for=condition=available --timeout=600s deployment/backend
        kubectl wait --for=condition=available --timeout=600s deployment/ai-services
        
    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://frontend-service/health

  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: kubernetes-deploy
    if: always() && needs.kubernetes-deploy.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name skillforge-ai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        
    - name: Deploy monitoring stack
      working-directory: infrastructure/monitoring
      run: |
        kubectl apply -f prometheus/
        kubectl apply -f grafana/
        kubectl apply -f alertmanager/
        
    - name: Configure Datadog
      run: |
        kubectl create secret generic datadog-secret \
          --from-literal=api-key=${{ secrets.DATADOG_API_KEY }} \
          --from-literal=app-key=${{ secrets.DATADOG_APP_KEY }}
        kubectl apply -f infrastructure/monitoring/datadog/
