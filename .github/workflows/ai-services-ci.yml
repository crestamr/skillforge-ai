name: AI Services CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ai-services/**'
      - '.github/workflows/ai-services-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ai-services/**'
      - '.github/workflows/ai-services-ci.yml'

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: skillforge-ai/ai-services

jobs:
  lint-and-test:
    name: Lint and Test AI Services
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-ai-pip-${{ hashFiles('ai-services/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-ai-pip-
          
    - name: Install dependencies
      working-directory: ai-services
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Black formatter check
      working-directory: ai-services
      run: black --check --diff .
      
    - name: Run isort import sorting check
      working-directory: ai-services
      run: isort --check-only --diff .
      
    - name: Run Flake8 linting
      working-directory: ai-services
      run: flake8 .
      
    - name: Run mypy type checking
      working-directory: ai-services
      run: mypy .
      
    - name: Run pytest with coverage
      working-directory: ai-services
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=75
      env:
        HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ai-services/coverage.xml
        flags: ai-services
        name: ai-services-coverage

  model-tests:
    name: AI Model Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ai-services
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Download test models
      working-directory: ai-services
      run: |
        python scripts/download_test_models.py
      env:
        HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN }}
        
    - name: Run model performance tests
      working-directory: ai-services
      run: |
        pytest tests/model_tests/ -v --tb=short
      env:
        HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN }}
        
    - name: Run model accuracy benchmarks
      working-directory: ai-services
      run: |
        python scripts/run_benchmarks.py --output benchmark-results.json
      env:
        HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN }}
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: model-benchmarks
        path: ai-services/benchmark-results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ai-services
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Run Safety check for vulnerabilities
      working-directory: ai-services
      run: safety check --json --output safety-report.json || true
      
    - name: Run Bandit security linter
      working-directory: ai-services
      run: bandit -r app/ -f json -o bandit-report.json || true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: ai-security-reports
        path: |
          ai-services/safety-report.json
          ai-services/bandit-report.json

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, model-tests]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ai-services
        file: ai-services/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          HUGGINGFACE_API_TOKEN=${{ secrets.HUGGINGFACE_API_TOKEN }}

  integration-tests:
    name: AI Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d ai-services
        sleep 60  # AI services need more time to load models
        
    - name: Run AI service integration tests
      working-directory: ai-services
      run: |
        python -m pytest tests/integration/ -v
      env:
        AI_SERVICES_URL: http://localhost:8001
        
    - name: Test model endpoints
      run: |
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:8001/models/status || exit 1

  performance-test:
    name: AI Performance Testing
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install performance testing tools
      run: |
        pip install locust requests
        
    - name: Run AI service performance tests
      working-directory: ai-services
      run: |
        locust -f tests/performance/ai_locustfile.py \
          --host=http://localhost:8001 \
          --users=10 \
          --spawn-rate=2 \
          --run-time=3m \
          --html=ai-performance-report.html \
          --headless
          
    - name: Upload AI performance report
      uses: actions/upload-artifact@v3
      with:
        name: ai-performance-report
        path: ai-services/ai-performance-report.html

  deploy-staging:
    name: Deploy AI Services to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy AI services to staging
      run: |
        echo "Deploying AI services to staging environment"
        # Add actual deployment commands here
        
    - name: Warm up models
      run: |
        echo "Warming up AI models in staging"
        # Add model warm-up commands here
        
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy AI Services to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy AI services to production
      run: |
        echo "Deploying AI services to production environment"
        # Add actual deployment commands here
        
    - name: Warm up models
      run: |
        echo "Warming up AI models in production"
        # Add model warm-up commands here
        
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  model-monitoring:
    name: Model Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Run model monitoring checks
      working-directory: ai-services
      run: |
        python scripts/monitor_models.py --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      env:
        MONITORING_API_KEY: ${{ secrets.MONITORING_API_KEY }}
        
    - name: Upload monitoring results
      uses: actions/upload-artifact@v3
      with:
        name: model-monitoring-results
        path: ai-services/monitoring-results.json
